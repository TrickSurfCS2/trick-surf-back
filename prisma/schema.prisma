generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//* ==== Models ==================================================================== *//

model User {
  id       Int    @id @unique @default(autoincrement())
  steamid  String @unique
  username String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Trick          Trick[]
  UserPermission UserPermission[]

  @@map(name: "user")
}

model UserPermission {
  id         Int        @id @unique @default(autoincrement())
  userId     Int
  permission Permission

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "user_permission")
}

model Complete {
  id      Int @id @unique @default(autoincrement())
  userId  Int
  trickId Int

  speed Int
  time  Float

  createdAt DateTime  @default(now())
  TimeWr    TimeWr[]
  SpeedWr   SpeedWr[]

  @@map(name: "complete")
}

model Trick {
  id        Int    @id @unique @default(autoincrement())
  name      String
  point     Int
  startType Int

  authorId Int
  mapId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  User User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Map  Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)

  Route   Route[]
  TimeWr  TimeWr[]
  SpeedWr SpeedWr[]

  @@index([authorId])
  @@index([mapId])
  @@map(name: "trick")
}

model Map {
  id       Int     @id @unique @default(autoincrement())
  name     String
  fullName String
  preview  String?
  origin   Float[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Trick   Trick[]
  Trigger Trigger[]

  @@map(name: "map")
}

model Trigger {
  id       Int     @id @unique @default(autoincrement())
  name     String
  fullName String?
  preview  String?
  coords   Float[] @default([])

  mapId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Map Map @relation(fields: [mapId], references: [id], onDelete: Cascade)

  Route Route[]

  @@index([mapId])
  @@map(name: "trigger")
}

model Route {
  id        Int @id @unique @default(autoincrement())
  trickId   Int
  triggerId Int

  Trick   Trick   @relation(fields: [trickId], references: [id], onDelete: Cascade)
  Trigger Trigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@index([trickId])
  @@index([triggerId])
  @@map(name: "route")
}

//* ==== WR HELPERS (actually not needed :D) =============================================================== *//

model TimeWr {
  id         Int      @id @unique @default(autoincrement())
  trickId    Int      @unique
  completeId Int
  updatedAt  DateTime @default(now())

  Trick    Trick    @relation(fields: [trickId], references: [id], onDelete: Cascade)
  Complete Complete @relation(fields: [completeId], references: [id], onDelete: Cascade)

  @@index([trickId])
  @@index([completeId])
  @@map(name: "time_wr")
}

model SpeedWr {
  id         Int      @id @unique @default(autoincrement())
  trickId    Int      @unique
  completeId Int
  updatedAt  DateTime @default(now())

  Trick    Trick    @relation(fields: [trickId], references: [id], onDelete: Cascade)
  Complete Complete @relation(fields: [completeId], references: [id], onDelete: Cascade)

  @@index([trickId])
  @@index([completeId])
  @@map(name: "speed_wr")
}

//* ==== Enums ==================================================================== *//

enum Permission {
  UpdateTrick
  CreateTrick
  DeleteTrick
  BanUser
  Teleport
}
